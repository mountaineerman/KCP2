/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mountaineerman.kcp2.kkim.app;

import mountaineerman.kcp2.kkim.app.model.*;
/*
import mountaineerman.kcp2.kkim.kmega.KMegaApi;
import mountaineerman.kcp2.kkim.list.LinkedList;

import static mountaineerman.kcp2.kkim.utilities.StringUtils.join;
import static mountaineerman.kcp2.kkim.utilities.StringUtils.split;

import java.io.IOException;
import java.util.Arrays;

import krpc.client.Connection;
import krpc.client.RPCException;
import krpc.client.services.KRPC;

//TODO Temporarily added Serial Communication library for testing connection between KKIM and KMega:
import com.fazecast.jSerialComm.*;

import static mountaineerman.kcp2.kkim.app.MessageUtils.getMessage;
*/
public class App
{
	public static void main(String[] args)
	{
		System.out.println("=======================================================================================");
		System.out.println(" Kerbal Control Panel 2");
		System.out.println("=======================================================================================");
		/*
		 * TODO SETTINGS PLACEHOLDER
		 * 
		 * KMega
		 * 		COM port ("COM4")
		 * 		COM port BAUD rate
		 * 		Refresh frequency
		 * KNano
		 * 		COM port ("COM6")
		 * 		COM port BAUD rate
		 * 		Refresh frequency
		 * 
		 * KKIM
		 * 		Refresh frequency
		 * 		AnalogInput calibration limits
		 * 		PWM LED maximum brightness (overall; general override for specific LED) / scaling offset...
		 */
		
		// =================================================================================================================
		// PARTS - Inputs
		// =================================================================================================================
		SwitchSP2T stagingButton = new SwitchSP2T("stagingButton", ModuleID.A);
		SwitchSP2T brakeButton = new SwitchSP2T("brakeButton", ModuleID.A);
		
		SwitchSP2T abortButton = new SwitchSP2T("abortButton", ModuleID.B);
		SwitchSP2T trimPitchSwitch = new SwitchSP2T("trimPitchSwitch", ModuleID.B);
		SwitchSP2T trimYawSwitch = new SwitchSP2T("trimYawSwitch", ModuleID.B);
		SwitchSP2T trimRollSwitch = new SwitchSP2T("trimRollSwitch", ModuleID.B);
		SwitchSP2T timeWarpUpButton = new SwitchSP2T("timeWarpUpButton", ModuleID.B);
		SwitchSP2T timeWarpDownButton = new SwitchSP2T("timeWarpDownButton", ModuleID.B);
		SwitchSP2T joystickButton = new SwitchSP2T("joystickButton", ModuleID.B);
		
		SwitchSP2T SAS_Switch = new SwitchSP2T("SAS_Switch", ModuleID.D);
		SwitchSP2T RCS_Switch = new SwitchSP2T("RCS_Switch", ModuleID.D);
		SwitchSP2T lightsSwitch = new SwitchSP2T("lightsSwitch", ModuleID.D);
		SwitchSP2T gearSwitch = new SwitchSP2T("gearSwitch", ModuleID.D);
		SwitchSP2T brakeSwitch = new SwitchSP2T("brakeSwitch", ModuleID.D);
		SwitchSP2T mapSwitch = new SwitchSP2T("mapSwitch", ModuleID.D);
		SwitchSP2T muteSwitch = new SwitchSP2T("muteSwitch", ModuleID.D);
		SwitchSP2T autoHoldButton = new SwitchSP2T("autoHoldButton", ModuleID.D);
		SwitchSP2T autoProgradeButton = new SwitchSP2T("autoProgradeButton", ModuleID.D);
		SwitchSP2T autoRetrogradeButton = new SwitchSP2T("autoRetrogradeButton", ModuleID.D);
		SwitchSP2T autoNormalButton = new SwitchSP2T("autoNormalButton", ModuleID.D);
		SwitchSP2T autoAntiNormalButton = new SwitchSP2T("autoAntiNormalButton", ModuleID.D);
		SwitchSP2T autoRadialInButton = new SwitchSP2T("autoRadialInButton", ModuleID.D);
		SwitchSP2T autoRadialOutButton = new SwitchSP2T("autoRadialOutButton", ModuleID.D);
		SwitchSP2T autoTargetButton = new SwitchSP2T("autoTargetButton", ModuleID.D);
		SwitchSP2T autoAntiTargetButton = new SwitchSP2T("autoAntiTargetButton", ModuleID.D);
		SwitchSP2T autoManeuverButton = new SwitchSP2T("autoManeuverButton", ModuleID.D);
		
		SwitchSP2T ag1Switch = new SwitchSP2T("ag1Switch", ModuleID.E);
		SwitchSP2T ag2Switch = new SwitchSP2T("ag2Switch", ModuleID.E);
		SwitchSP2T ag3Switch = new SwitchSP2T("ag3Switch", ModuleID.E);
		SwitchSP2T ag4SwitchScience = new SwitchSP2T("ag4SwitchScience", ModuleID.E);
		SwitchSP2T ag5SwitchReset = new SwitchSP2T("ag5SwitchReset", ModuleID.E);
		SwitchSP2T ag6SwitchSolar = new SwitchSP2T("ag6SwitchSolar", ModuleID.E);
		SwitchSP2T ag7SwitchLadder = new SwitchSP2T("ag7SwitchLadder", ModuleID.E);
		SwitchSP2T ag8SwitchATNV = new SwitchSP2T("ag8SwitchATNV", ModuleID.E);
		SwitchSP2T ag9SwitchFairing = new SwitchSP2T("ag9SwitchFairing", ModuleID.E);
		SwitchSP2T ag10SwitchChute = new SwitchSP2T("ag10SwitchChute", ModuleID.E);
		
		SwitchSP2T trimMasterSwitch = new SwitchSP2T("trimMasterSwitch", ModuleID.F);
		
		SwitchSP2T heatLifeSwitch = new SwitchSP2T("heatLifeSwitch", ModuleID.G);
		
		SwitchSP2T glassTLButton = new SwitchSP2T("glassTLButton", ModuleID.H);
		SwitchSP2T glassCLButton = new SwitchSP2T("glassCLButton", ModuleID.H);
		SwitchSP2T glassBLButton = new SwitchSP2T("glassBLButton", ModuleID.H);
		SwitchSP2T glassTRButton = new SwitchSP2T("glassTRButton", ModuleID.H);
		SwitchSP2T glassCRButton = new SwitchSP2T("glassCRButton", ModuleID.H);
		SwitchSP2T glassBRButton = new SwitchSP2T("glassBRButton", ModuleID.H);
		
		SwitchSP2T mnprpIntakeSwitch = new SwitchSP2T("mnprpIntakeSwitch", ModuleID.I);
		
		//TODO SP3T Switches
		//TODO SP4T Switch
		
		AnalogInput throttlePot = new AnalogInput("throttlePot", ModuleID.A, 0, 1023);
		//TODO create joystick mapping between axis number and Rotation (Pitch/Yaw/Roll), Translation (Up-Down/Left-Right/In-Out):
		AnalogInput joystickAxis1Pot = new AnalogInput("joystickAxis1Pot", ModuleID.B, 0, 1023); 
		AnalogInput joystickAxis2Pot = new AnalogInput("joystickAxis2Pot", ModuleID.B, 0, 1023);
		AnalogInput joystickAxis3Pot = new AnalogInput("joystickAxis3Pot", ModuleID.B, 0, 1023);
		AnalogInput multiUsePot = new AnalogInput("multiUsePot", ModuleID.F, 0, 1023);
		AnalogInput currentSensor = new AnalogInput("currentSensor", ModuleID.F, 0, 1023);
		
		// =================================================================================================================
		// PARTS - Outputs
		// =================================================================================================================
		PWM_LED moduleABrakeLED = new PWM_LED("moduleABrakeLED", ModuleID.A);
		
		PWM_LED moduleDBrakeLED = new PWM_LED("moduleDBrakeLED", ModuleID.D);
		PWM_LED autoHoldLED = new PWM_LED("autoHoldLED", ModuleID.D);
		PWM_LED autoProgradeLED = new PWM_LED("autoProgradeLED", ModuleID.D);
		PWM_LED autoRetrogradeLED = new PWM_LED("autoRetrogradeLED", ModuleID.D);
		PWM_LED autoManeuverLED = new PWM_LED("autoManeuverLED", ModuleID.D);
		
		PWM_LED fairingLED = new PWM_LED("fairingLED", ModuleID.E);
		PWM_LED chuteLED = new PWM_LED("chuteLED", ModuleID.E);
		PWM_LED SP3T_Speed_ORB_LED = new PWM_LED("SP3T_Speed_ORB_LED", ModuleID.E);
		PWM_LED SP3T_Mode_PLN_LED = new PWM_LED("SP3T_Mode_PLN_LED", ModuleID.E);
		PWM_LED SP3T_Pitch_30_LED = new PWM_LED("SP3T_Pitch_30_LED", ModuleID.E);
		
		PWM_LED backlight100LED = new PWM_LED("backlight100LED", ModuleID.F);
		PWM_LED backlight75LED = new PWM_LED("backlight75LED", ModuleID.F);
		PWM_LED backlight50LED = new PWM_LED("backlight50LED", ModuleID.F);
		PWM_LED backlight25LED = new PWM_LED("backlight25LED", ModuleID.F);
		
		PWM_LED commsLED = new PWM_LED("commsLED", ModuleID.G);
		
		PWM_LED glassTL_LED = new PWM_LED("glassTL_LED", ModuleID.H);
		PWM_LED glassCL_LED = new PWM_LED("glassCL_LED", ModuleID.H);
		PWM_LED glassBL_LED = new PWM_LED("glassBL_LED", ModuleID.H);
		PWM_LED glassTR_LED = new PWM_LED("glassTR_LED", ModuleID.H);
		PWM_LED glassCR_LED = new PWM_LED("glassCR_LED", ModuleID.H);
		PWM_LED glassBR_LED = new PWM_LED("glassBR_LED", ModuleID.H);
		
		//TODO RGB PWM LEDs
		//TODO StepperMotors
		//TODO NEMA17StepperMotor
		//TODO AltitudeGauge
		
		// =================================================================================================================
		
		/* 	High-level flow:
		 * 	
		 * 	Initial:
		 * 		-Establish connection to kRPC
		 * 		-Establish connection to kMega
		 * 		-Establish connection to kAndro
		 * 	Loop:
		 * 		-Confirm connection to kRPC
		 * 		-Confirm connection to kMega
		 * 		-Confirm connection between kMega and kNano 
		 * 		-Confirm connection to kAndro
		 *		 
		 * 		A-Fetch latest kRPC values
		 * 		B-Fetch latest kMega values
		 * 		C-Update KIM object states based on A and B
		 * 			-Send "packet" to kMega
		 * 			-Send controlling signals to kRPC
		 * 			-Send "packet" to kAndro
		 * 
		 * 		-Idle	
		 */
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/*System.out.println(">>>>> kkim-app: In main method");
		LinkedList tokens;
		tokens = split(getMessage());
		System.out.println(join(tokens));
		System.out.println(KMegaApi.getHelloWorld());
		*/
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/*System.out.println("Starting KKIM-kRPC connection test...");
		try (Connection connection = Connection.newInstance())
		{
			KRPC krpc = KRPC.newInstance(connection);
			System.out.println("Connected to kRPC version " + krpc.getStatus().getVersion());
		}
		catch (RPCException e) {System.out.println("Caught RPCException: " + e.getMessage());}
		catch (IOException e)  {System.out.println("Caught IOException: " + e.getMessage());}
		*/
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		/*//https://fazecast.github.io/jSerialComm/
		System.out.println("Starting KKIM-KMega connection test...");
		
		SerialPort comPort = SerialPort.getCommPort("COM4");
		
		comPort.openPort();
		comPort.addDataListener(new SerialPortDataListener()
			{
			   @Override
			   public int getListeningEvents() { return SerialPort.LISTENING_EVENT_DATA_AVAILABLE; }
			   @Override
			   public void serialEvent(SerialPortEvent event)
			   {
			      if (event.getEventType() != SerialPort.LISTENING_EVENT_DATA_AVAILABLE)
			         return;
			      byte[] newData = new byte[comPort.bytesAvailable()];
			      int numRead = comPort.readBytes(newData, newData.length);
			      System.out.println("Read " + numRead + " bytes: " + Arrays.toString(newData));
			   }
			}
		);*/
	}
}

